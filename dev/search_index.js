var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = MechanicalMaterialModels","category":"page"},{"location":"#MechanicalMaterialModels","page":"Home","title":"MechanicalMaterialModels","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Implementations of mechanical (stress-strain) material models following  the MaterialModelsBase.jl interface. ","category":"page"},{"location":"#Elasticity","page":"Home","title":"Elasticity","text":"","category":"section"},{"location":"#Linear-Isotropic-Elasticity","page":"Home","title":"Linear Isotropic Elasticity","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"LinearElastic(::Val{:isotropic})","category":"page"},{"location":"#MechanicalMaterialModels.LinearElastic-Tuple{Val{:isotropic}}","page":"Home","title":"MechanicalMaterialModels.LinearElastic","text":"LinearElastic(; E, ν)\nLinearElastic{:isotropic}(; E, ν)\n\nCreate an isotropic LinearElastic material with Young's modulus, E, and Poisson's ratio ν, such that\n\nboldsymbolsigma = 2mu boldsymbolepsilon + lambda mathrmtr(boldsymbolepsilon) boldsymbolI \n\nwhere the Lamé parameters, mu and lambda are defined as\n\nmu = fracE2(1+nu) quad lambda=fracEnu(1+nu)(1-2nu)\n\n\n\n\n\n","category":"method"},{"location":"#Linear-Anisotropic-Elasticity","page":"Home","title":"Linear Anisotropic Elasticity","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"LinearElastic(::Val{:general})\nLinearElastic(::Val{:cubicsymmetry})","category":"page"},{"location":"#MechanicalMaterialModels.LinearElastic-Tuple{Val{:general}}","page":"Home","title":"MechanicalMaterialModels.LinearElastic","text":"LinearElastic(C::SymmetricTensor{4,3})\nLinearElastic{:general}(C::SymmetricTensor{4,3})\n\nCreate a general LinearElastic material with the 4th order elastic stiffness tensor boldsymbolC, such that  boldsymbolsigma = boldsymbolCboldsymbolepsilon. \n\n\n\n\n\n","category":"method"},{"location":"#MechanicalMaterialModels.LinearElastic-Tuple{Val{:cubicsymmetry}}","page":"Home","title":"MechanicalMaterialModels.LinearElastic","text":"LinearElastic{:cubicsymmetry}(; C1111::T, C1122::T, C1212::T) where {T}\n\nCreate a LinearElastic material where the stiffness tensor, boldsymbolC, possesses cubic symmetry along the coordinate axes. Using the 9-component Voigt notation, boldsymbolC can be expressed as\n\nboldsymbolC = \nbeginbmatrix\nC_1111  C_1122  C_1122  0  0  0  0  0  0 \nC_1122  C_1111  C_1122  0  0  0  0  0  0 \nC_1122  C_1122  C_1111  0  0  0  0  0  0 \n0  0  0  2C_1212  0  0  0  0  0 \n0  0  0  0  2C_1212  0  0  0  0 \n0  0  0  0  0  2C_1212  0  0  0 \n0  0  0  0  0  0  2C_1212  0  0 \n0  0  0  0  0  0  0  2C_1212  0 \n0  0  0  0  0  0  0  0  2C_1212 \nendbmatrix\n\n\n\n\n\n","category":"method"},{"location":"#Plasticity","page":"Home","title":"Plasticity","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Plastic","category":"page"},{"location":"#MechanicalMaterialModels.Plastic","page":"Home","title":"MechanicalMaterialModels.Plastic","text":"Plastic(;elastic, yield, isotropic, kinematic, overstress)\n\nA small-strain plasticity model with modular elastic laws, yield criteria,  multiple isotropic and kinematic hardening contributions, and either rate-independent or viscoplastic response.\n\nKeyword arguments\n\nelastic::AbstractMaterial\nElastic law, see e.g. LinearElastic\nyield::YieldCriterion\nYield criterion, including the initial yield limit. If yield::Real is given, VonMises(yield) is used. \nisotropic::Union{AbstractIsotropicHardening,Tuple}\nIsotropic hardening laws, see e.g. Voce\nkinematic::Union{AbstractKinematicHardening,Tuple}\nKinematic hardening laws, see e.g. ArmstrongFrederick\noverstress::Union{RateIndependent,OverstressFunction}\nRate dependence, see e.g. NortonOverstress\nDefaults to RateIndependent()\n\nTheory\n\nWhile the exact model response is given by the laws in elastic, yield, isotropic, kinematic, and overstress, the generic model equations are described below. \n\nThe stress is calculated from the elastic strains, boldsymbolepsilon_mathrme, obtained via the  additive decomposition, boldsymbolepsilon = boldsymbolepsilon_mathrme + boldsymbolepsilon_mathrmp.  The elastic law is specified by m.elastic and is evaluated by giving it the elastic strain. \n\nA yield criterion of the type \n\nvarPhi = fleft( boldsymbolsigma - boldsymbolbeta right) - leftY_0 + kapparight\n\nis assumed. Here, boldsymbolbeta = sum_i=1^N_mathrmkin boldsymbolbeta_i is the total back-stress,  and kappa = sum_i=1^N_mathrmiso kappa_i is the total isotropic hardening stress. The initial yield limit  is passed to the yield criterion along with potentially other parameters.  The evolution laws for boldsymbolbeta_i and kappa_i are given by the kinematic and isotropic hardening laws.\n\nAssociative plastic flow is used to obtain the plastic strains,\n\ndotepsilon_mathrmp = dotlambda leftfracpartial fpartial boldsymbolsigmarightvert_left( boldsymbolsigma - boldsymbolbeta right)\n= dotlambda boldsymbolnu\n\nThe isotropic hardening is formulated as\n\nkappa = sum_i=1^N_mathrmiso g_mathrmisoi(lambda)\n\nwhere g_mathrmisoi(lambda) is specified by m.isotropic[i] (see Isotropic hardening)\n\nKinematic hardening is formulated as\n\ndotboldsymbolbeta_i = dotlambda g_mathrmkini(nu boldsymbolbeta_i)\n\nwhere g_mathrmkini(boldsymbolnu boldsymbolbeta_i) is specified by m.kinematic[i] and iin1N_mathrmkin (see Kinematic hardening)]\n\nIf overstress=RateIndependent(), the plastic multiplier, lambda, is obtained via the KKT-conditions,\n\ndotlambda geq 0 quad varPhi leq 0 quad dotlambdavarPhi = 0\n\nOtherwise, the overstress function, eta(varPhi), determines the evolution of lambda as \n\ndotlambda = eta(varPhi (Y_0 + kappa))\n\nExample\n\nm = Plastic(elastic = LinearElastic(E=210.e3, ν=0.3),\n            yield = 100.0,\n            isotropic = (Voce(Hiso=-100.e3, κ∞=-100.0),Voce(Hiso=10.e3, κ∞=200.0)),\n            kinematic = (ArmstrongFrederick(Hkin=200.e3, β∞=200.0),\n                         OhnoWang(Hkin=1000.e3, β∞=200.0, m=3.0)),\n            overstress = NortonOverstress(;tstar=1.0, nexp=2.0))\n\n\n\n\n\n","category":"type"},{"location":"#Yield-criteria","page":"Home","title":"Yield criteria","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"VonMises\nDruckerPrager","category":"page"},{"location":"#MechanicalMaterialModels.VonMises","page":"Home","title":"MechanicalMaterialModels.VonMises","text":"VonMises(Y0)\n\nCreate a von Mises yield criterion with initial yield limit, Y_0, as Y0. The yield criterion is then defined as\n\nPhi = sqrtfrac32 left textdev left( boldsymbolsigma_mathrmred right) right - left Y_0 + Delta Y right = 0\n\nwhere boldsymbolsigma_mathrmred is the reduced (by kinematic hardening) stress tensor, and Delta Y the change of the initial  yield limit due to isotropic hardening (i.e. kappa).\n\n\n\n\n\n","category":"type"},{"location":"#MechanicalMaterialModels.DruckerPrager","page":"Home","title":"MechanicalMaterialModels.DruckerPrager","text":"DruckerPrager(;Y0, B)\n\nCreate a Drucker-Prager yield criterion, with initial yield limit, Y_0, as Y0, and pressure sensitivity B. The yield criterion is defined as \n\nPhi = sqrtfrac32 left mathrmdev left( boldsymbolsigma_mathrmred right) right - Bmathrmtrleft( boldsymbolsigma_mathrmred right) - left Y_0 + Delta Y right = 0\n\nwhere boldsymbolsigma_mathrmred is the reduced (by kinematic hardening) stress tensor, and Delta Y the change of the initial  yield limit due to isotropic hardening (i.e. kappa).\n\n\n\n\n\n","category":"type"},{"location":"#Isotropic-hardening","page":"Home","title":"Isotropic hardening","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Voce\nSwift","category":"page"},{"location":"#MechanicalMaterialModels.Voce","page":"Home","title":"MechanicalMaterialModels.Voce","text":"Voce(;Hiso, κ∞)\n\nExponentially saturating isotropic hardening\n\nkappa_i = g_mathrmisoi(lambda) = kappa_infty left1 - mathrmexpleft(fracH_mathrmisokappa_infty lambda right)right\n\nor alternatively as differential equations\n\ndotkappa_i = dotlambda H_mathrmiso left1 - frackappa_ikappa_inftyright\n\nArguments\n\nHiso: Isotropic hardening modulus, H_mathrmiso\nκ∞: Saturation hardening value, kappa_infty\n\n\n\n\n\n","category":"type"},{"location":"#MechanicalMaterialModels.Swift","page":"Home","title":"MechanicalMaterialModels.Swift","text":"Swift(K, λ0, n)\n\nIsotropic hardening by the Swift power law\n\nkappa_i = g_mathrmisoi(lambda) = K leftlambda_0 + lambda right^n\n\nArguments\n\nK: K\nλ0: lambda_0\nn: n\n\n\n\n\n\n","category":"type"},{"location":"#Kinematic-hardening","page":"Home","title":"Kinematic hardening","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ArmstrongFrederick\nDelobelle\nOhnoWang","category":"page"},{"location":"#MechanicalMaterialModels.ArmstrongFrederick","page":"Home","title":"MechanicalMaterialModels.ArmstrongFrederick","text":"ArmstrongFrederick(Hkin, β∞)\n\nArmstrong-Frederick kinematic hardening law (doi: 10.1179/096034007X207589)\n\ng_mathrmkini(nu boldsymbolbeta_i) = H_mathrmkin (frac23boldsymbolnu - fracboldsymbolbeta_ibeta_infty)\n\nArguments\n\nHkin: Kinematic hardening modulus, H_mathrmkin\nβ∞: Effective back-stress saturation value, beta_infty\n\n\n\n\n\n","category":"type"},{"location":"#MechanicalMaterialModels.Delobelle","page":"Home","title":"MechanicalMaterialModels.Delobelle","text":"Delobelle(Hkin, β∞, δ)\n\nKinematic hardening law according to Delobelle, which combines the Armstrong-Frederick law with the Burlet-Cailletaud law (doi: 10.1016/S0749-6419(95)00001-1)\n\ng_mathrmkini(nu boldsymbolbeta_i) = H_mathrmkin leftfrac23boldsymbolnu \n                                    - deltafracboldsymbolbeta_ibeta_infty\n                                    - frac23beta_inftyleft1 - deltarightleftboldsymbolnuboldsymbolbeta_irightboldsymbolnu\n                                    right\n\nArguments\n\nHkin: Kinematic hardening modulus, H_mathrmkin\nβ∞: Effective back-stress saturation value, beta_infty\nδ: Amount of Armstrong-Frederick type of kinematic hardening, delta\n\n\n\n\n\n","category":"type"},{"location":"#MechanicalMaterialModels.OhnoWang","page":"Home","title":"MechanicalMaterialModels.OhnoWang","text":"OhnoWang(Hkin, β∞, m)\n\nKinematic hardening law according to Ohno-Wang (doi: 10.1016/0749-6419(93)90042-O)\n\ng_mathrmkini(nu boldsymbolbeta_i) = H_mathrmkin leftfrac23boldsymbolnu \n                                    - fracboldsymbolbeta_ibeta_infty \n                                    fraclangle boldsymbolnuboldsymbolbeta_i ranglebeta_infty\n                                    leftfracbeta_i^mathrmvMbeta_inftyright^m\n                                    right\n\nwhere langle x rangle is 0 if xleq 0 and x if x0. beta_i^mathrmvM = sqrt2boldsymbolbeta_iboldsymbolbeta_i3, noting that boldsymbolbeta_i is deviatoric.\n\nArguments\n\nHkin: Kinematic hardening modulus, H_mathrmkin\nβ∞: Effective back-stress saturation value, beta_infty\nm: Exponent in the OhnoWang equation, m\n\n\n\n\n\n","category":"type"},{"location":"#Overstress-functions","page":"Home","title":"Overstress functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"RateIndependent\nNortonOverstress","category":"page"},{"location":"#MechanicalMaterialModels.RateIndependent","page":"Home","title":"MechanicalMaterialModels.RateIndependent","text":"RateIndependent()\n\nThe evolution of the plastic multiplier for a rate-dependent material is given by  the so-called KKT loading/unloading conditions\n\ndotlambda geq 0 quad varPhi leq 0 quad dotlambdavarPhi = 0\n\n\n\n\n\n","category":"type"},{"location":"#MechanicalMaterialModels.NortonOverstress","page":"Home","title":"MechanicalMaterialModels.NortonOverstress","text":"NortonOverstress(;tstar, nexp)\n\nThe norton overstress function is defined as \n\neta(varPhi sigma_mathrmy) = frac1t_* leftlangle fracvarPhisigma_mathrmy rightrangle^n\n\nwhere the material parameters t_* (tstar) and n (nexp) represent the  relaxation time and overstress sensitivty.  \n\n\n\n\n\n","category":"type"},{"location":"#Internal-functions","page":"Home","title":"Internal functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The following functions can be relevant to use outside the package as well, but are not part of the  public API.","category":"page"},{"location":"","page":"Home","title":"Home","text":"vonmises\nmacaulay","category":"page"},{"location":"#MechanicalMaterialModels.vonmises","page":"Home","title":"MechanicalMaterialModels.vonmises","text":"function vonmises(σ::SymmetricTensor{2,3})\n\nCalculate the von Mises effective stress for a 2nd order tensor\n\n\n\n\n\n","category":"function"},{"location":"#MechanicalMaterialModels.macaulay","page":"Home","title":"MechanicalMaterialModels.macaulay","text":"function macaulay(x)\n\nCalculate the macaulay bracket of x, langle x rangle\n\nlangle x rangle = leftlbrace beginmatrix 0  xleq 0  x  x0 endmatrix right \n\n\n\n\n\n","category":"function"},{"location":"#Developer-Documentation","page":"Home","title":"Developer Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The following functions and their docstrings may be helpful  for understanding the code.","category":"page"},{"location":"","page":"Home","title":"Home","text":"maketuple_or_nothing\nget_promoted_type\nbaseof\nvector_residual!","category":"page"},{"location":"#MechanicalMaterialModels.maketuple_or_nothing","page":"Home","title":"MechanicalMaterialModels.maketuple_or_nothing","text":"maketuple_or_nothing(x)\n\nx is a single value: Convert to a Tuple of length 1\nx is a Tuple or Nothing: Return x\n\n\n\n\n\n","category":"function"},{"location":"#MechanicalMaterialModels.get_promoted_type","page":"Home","title":"MechanicalMaterialModels.get_promoted_type","text":"get_promoted_type(args...)\n\nGet the promoted type for the type of the arguments,  e.g. get_promoted_type(1, 1.f0) is Float32\n\n\n\n\n\n","category":"function"},{"location":"#MechanicalMaterialModels.baseof","page":"Home","title":"MechanicalMaterialModels.baseof","text":"baseof(t::AbstractTensor)\n\nGet the base-type of t, i.e. if t::SymmetricTensor{2,3,Float64,6}, baseof(t) returns SymmetricTensor{2,3}\n\n\n\n\n\n","category":"function"},{"location":"#MechanicalMaterialModels.vector_residual!","page":"Home","title":"MechanicalMaterialModels.vector_residual!","text":"vector_residual!(rf::Function, r_vector::AbstractVector, x_vector::AbstractVector, x)\n\nMakes it easy to construct a mutating vector residual function from a tensor-like equation, r = rf(x) = residual(x, args...), e.g. rf!(r_vector, x_vector) = vector_residual!(z -> residual(z, args...), r_vector, x_vector, x)\n\nThe input x and output r of rf should have the same type, RT, and support Tensors.get_base(RT), frommandel(Tensors.get_base(RT), x_vector), and  tomandel!(r_vector, r).\n\nThe approach was adopted from https://github.com/kimauth/MaterialModels.jl\n\n\n\n\n\n","category":"function"}]
}
